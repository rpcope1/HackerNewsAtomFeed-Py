#---------------------------------------
#   Hacker News Atom Feed Generator
#   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#   A simple Atom feed server for Hacker
#   News data written by Robert P. Cope
#
#   Homepage: https://github.com/rpcope1/HackerNewsAtomFeed-Py


__author__ = 'Robert P. Cope'
__license__ = 'LGPL v3'

from HackerNewsAPI import HackerNewsAPI
import SimpleHTTPServer
import SocketServer
import pyatom
import sys
import threading
import datetime
import time
import logging

feed_logger = logging.getLogger(__name__)
if not feed_logger.handlers:
    ch = logging.StreamHandler()
    feed_logger.addHandler(ch)
    feed_logger.setLevel(logging.INFO)

FEED_FILE = '/feed.xml'

HACKERNEWS_ITEM_URL_TEMPLATE = 'https://news.ycombinator.com/item?id={id}'

def build_atom_handler(feed):
    class HackerNewsAtomHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
        def do_GET(self):
            feed_logger.info('Incoming GET for: {}'.format(self.path))
            if self.path == FEED_FILE or self.path == "/":
                self.send_response(200)
                self.send_header('Content-type', 'application/atom+xml')
                self.end_headers()
                self.wfile.write(feed.get_last_update())
            else:
                self.send_response(404, 'No such file or directory')
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                self.wfile.write('<html><h1>Error 404: No such file or directory!</h1>'
                                 '<h2>Generated by HNAtomFeedServe.py</h2>'
                                 '<a href="{}">Hacker News Atom Feed</a></html>'.format(FEED_FILE))
                return
    return HackerNewsAtomHandler


def update_feed(feed, api):
    feed_logger.info('Updating feed. NOTE: This could take a while...')
    feed.entries = []
    stories = api.get_top_stories()
    num_stories = len(stories)
    for i, item_num in enumerate(stories):
        feed_logger.info('Getting story {} of {} and updating feed.'.format(i, num_stories))
        story = api.get_item(item_num)
        feed.add(title=story.title,
                 id=story.id,
                 content=story.text if hasattr(story, 'text') else "",
                 content_type='plain',
                 url=story.url if story.url else HACKERNEWS_ITEM_URL_TEMPLATE.format(id=story.id),
                 author=story.by,
                 updated=datetime.datetime.fromtimestamp(int(story.time)))
    feed.feed_file = feed.to_string().encode('utf8')
    feed_logger.info('Feed update complete.')


class HackerNewsFeed(pyatom.AtomFeed):
    """
        This is really a hack to get around the fact the AtomFeed has to regenerate the
        the string every single time you call to_string(). I would rather keep the
        last XML file in memory and keep reserving this, only updating as we
        get an update from the HackerNews API.

        TODO: Find a better way to handle this.
    """
    def get_last_update(self):
        if not hasattr(self, 'feed_file'):
            self.feed_file = self.to_string().encode('utf8')
        return self.feed_file


def main(hostname='localhost', port=8000, refresh_min=15):
    port = int(port)
    refresh_min = int(refresh_min)
    #Set up to serve out of this directory.
    feed_logger.info('Initializing Hacker News Atom Feed Server')
    api = HackerNewsAPI()
    url = 'http://{host}:{port}'.format(host=hostname, port=port)
    feed_url = '{url}/{feed_file}'.format(url=url, feed_file=FEED_FILE)
    feed_logger.info('Location: {}'.format(feed_url))
    feed = HackerNewsFeed(title='Hacker News',
                          subtitle='An example Hacker News Atom Feed',
                          url=url,
                          feed_url=feed_url)
    httpd_handler = build_atom_handler(feed)
    feed_logger.info('Starting socket server...')
    httpd = SocketServer.TCPServer((hostname, port), httpd_handler)
    update_feed(feed, api)
    server_thread = threading.Thread(target=httpd.serve_forever)
    server_thread.daemon = True
    server_thread.start()
    while True:
        time.sleep(refresh_min*60)
        update_feed(feed, api)




if __name__ == "__main__":
    main(*sys.argv[1:])

